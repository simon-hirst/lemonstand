name: lemonstand

networks:
  default:
    name: lemonstand-net

volumes:
  mongo-data:
  rabbitmq-data:

services:
  mongo:
    image: mongo:7
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: lemonstand
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' | grep 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s

  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 10s

  # auth-service
  auth-service:
    build: { context: ./packages/auth-service }
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGO_URL: mongodb://mongo:27017/lemonstand-auth
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"net=require('net');s=net.connect(3000,'127.0.0.1');s.on('connect',()=>process.exit(0));s.on('error',()=>process.exit(1));setTimeout(()=>process.exit(1),5000)\""]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 10s

# products-service
  products-service:
    build: { context: ./packages/products-service }
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGO_URL: mongodb://mongo:27017/lemonstand-products
      REDIS_URL: redis://redis:6379
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"net=require('net');s=net.connect(3000,'127.0.0.1');s.on('connect',()=>process.exit(0));s.on('error',()=>process.exit(1));setTimeout(()=>process.exit(1),5000)\""]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 10s

# orders-service
  orders-service:
    build: { context: ./packages/orders-service }
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGO_URL: mongodb://mongo:27017/lemonstand-orders
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"net=require('net');s=net.connect(3000,'127.0.0.1');s.on('connect',()=>process.exit(0));s.on('error',()=>process.exit(1));setTimeout(()=>process.exit(1),5000)\""]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 10s

# payments-service
  payments-service:
    build: { context: ./packages/payments-service }
    restart: unless-stopped
    environment:
      NODE_ENV: production
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"net=require('net');s=net.connect(3000,'127.0.0.1');s.on('connect',()=>process.exit(0));s.on('error',()=>process.exit(1));setTimeout(()=>process.exit(1),5000)\""]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 10s

# email-service (worker-style; keep lightweight check)
  email-service:
    build: { context: ./packages/email-service }
    restart: unless-stopped
    environment:
      NODE_ENV: production
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -v >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 10s

# api-gateway
  api-gateway:
    build: { context: ./packages/api-gateway }
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      AUTH_URL: http://auth-service:3000
      PRODUCTS_URL: http://products-service:3000
      ORDERS_URL: http://orders-service:3000
      PAYMENTS_URL: http://payments-service:3000
    depends_on:
      auth-service:
        condition: service_healthy
      products-service:
        condition: service_healthy
      orders-service:
        condition: service_healthy
      payments-service:
        condition: service_healthy
    ports: ["3000:3000"]
    healthcheck:
      test: ["CMD-SHELL", "node -e \"net=require('net');s=net.connect(process.env.PORT||3000,'127.0.0.1');s.on('connect',()=>process.exit(0));s.on('error',()=>process.exit(1));setTimeout(()=>process.exit(1),5000)\""]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 10s

